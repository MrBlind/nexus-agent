# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import llm_service_pb2 as llm__service__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in llm_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LLMServiceStub(object):
    """LLM 服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteAgent = channel.unary_unary(
                '/nexus.llm.v1.LLMService/ExecuteAgent',
                request_serializer=llm__service__pb2.ExecuteAgentRequest.SerializeToString,
                response_deserializer=llm__service__pb2.ExecuteAgentResponse.FromString,
                _registered_method=True)
        self.ExecuteAgentStream = channel.unary_stream(
                '/nexus.llm.v1.LLMService/ExecuteAgentStream',
                request_serializer=llm__service__pb2.ExecuteAgentRequest.SerializeToString,
                response_deserializer=llm__service__pb2.ExecuteAgentStreamResponse.FromString,
                _registered_method=True)
        self.GetSupportedModels = channel.unary_unary(
                '/nexus.llm.v1.LLMService/GetSupportedModels',
                request_serializer=llm__service__pb2.GetSupportedModelsRequest.SerializeToString,
                response_deserializer=llm__service__pb2.GetSupportedModelsResponse.FromString,
                _registered_method=True)
        self.ValidateConfig = channel.unary_unary(
                '/nexus.llm.v1.LLMService/ValidateConfig',
                request_serializer=llm__service__pb2.ValidateConfigRequest.SerializeToString,
                response_deserializer=llm__service__pb2.ValidateConfigResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/nexus.llm.v1.LLMService/HealthCheck',
                request_serializer=llm__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=llm__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class LLMServiceServicer(object):
    """LLM 服务定义
    """

    def ExecuteAgent(self, request, context):
        """执行 LLM 代理请求 (非流式)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAgentStream(self, request, context):
        """执行 LLM 代理请求 (流式)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedModels(self, request, context):
        """获取支持的模型列表
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateConfig(self, request, context):
        """验证配置
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """健康检查
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LLMServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAgent,
                    request_deserializer=llm__service__pb2.ExecuteAgentRequest.FromString,
                    response_serializer=llm__service__pb2.ExecuteAgentResponse.SerializeToString,
            ),
            'ExecuteAgentStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteAgentStream,
                    request_deserializer=llm__service__pb2.ExecuteAgentRequest.FromString,
                    response_serializer=llm__service__pb2.ExecuteAgentStreamResponse.SerializeToString,
            ),
            'GetSupportedModels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedModels,
                    request_deserializer=llm__service__pb2.GetSupportedModelsRequest.FromString,
                    response_serializer=llm__service__pb2.GetSupportedModelsResponse.SerializeToString,
            ),
            'ValidateConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateConfig,
                    request_deserializer=llm__service__pb2.ValidateConfigRequest.FromString,
                    response_serializer=llm__service__pb2.ValidateConfigResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=llm__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=llm__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexus.llm.v1.LLMService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nexus.llm.v1.LLMService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LLMService(object):
    """LLM 服务定义
    """

    @staticmethod
    def ExecuteAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nexus.llm.v1.LLMService/ExecuteAgent',
            llm__service__pb2.ExecuteAgentRequest.SerializeToString,
            llm__service__pb2.ExecuteAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteAgentStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/nexus.llm.v1.LLMService/ExecuteAgentStream',
            llm__service__pb2.ExecuteAgentRequest.SerializeToString,
            llm__service__pb2.ExecuteAgentStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSupportedModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nexus.llm.v1.LLMService/GetSupportedModels',
            llm__service__pb2.GetSupportedModelsRequest.SerializeToString,
            llm__service__pb2.GetSupportedModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nexus.llm.v1.LLMService/ValidateConfig',
            llm__service__pb2.ValidateConfigRequest.SerializeToString,
            llm__service__pb2.ValidateConfigResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nexus.llm.v1.LLMService/HealthCheck',
            llm__service__pb2.HealthCheckRequest.SerializeToString,
            llm__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
