// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: llm_service.proto

package llmv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LLMService_ExecuteAgent_FullMethodName       = "/nexus.llm.v1.LLMService/ExecuteAgent"
	LLMService_ExecuteAgentStream_FullMethodName = "/nexus.llm.v1.LLMService/ExecuteAgentStream"
	LLMService_GetSupportedModels_FullMethodName = "/nexus.llm.v1.LLMService/GetSupportedModels"
	LLMService_ValidateConfig_FullMethodName     = "/nexus.llm.v1.LLMService/ValidateConfig"
	LLMService_HealthCheck_FullMethodName        = "/nexus.llm.v1.LLMService/HealthCheck"
)

// LLMServiceClient is the client API for LLMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LLM 服务定义
type LLMServiceClient interface {
	// 执行 LLM 代理请求 (非流式)
	ExecuteAgent(ctx context.Context, in *ExecuteAgentRequest, opts ...grpc.CallOption) (*ExecuteAgentResponse, error)
	// 执行 LLM 代理请求 (流式)
	ExecuteAgentStream(ctx context.Context, in *ExecuteAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteAgentStreamResponse], error)
	// 获取支持的模型列表
	GetSupportedModels(ctx context.Context, in *GetSupportedModelsRequest, opts ...grpc.CallOption) (*GetSupportedModelsResponse, error)
	// 验证配置
	ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error)
	// 健康检查
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type lLMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLLMServiceClient(cc grpc.ClientConnInterface) LLMServiceClient {
	return &lLMServiceClient{cc}
}

func (c *lLMServiceClient) ExecuteAgent(ctx context.Context, in *ExecuteAgentRequest, opts ...grpc.CallOption) (*ExecuteAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteAgentResponse)
	err := c.cc.Invoke(ctx, LLMService_ExecuteAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) ExecuteAgentStream(ctx context.Context, in *ExecuteAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecuteAgentStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LLMService_ServiceDesc.Streams[0], LLMService_ExecuteAgentStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ExecuteAgentRequest, ExecuteAgentStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_ExecuteAgentStreamClient = grpc.ServerStreamingClient[ExecuteAgentStreamResponse]

func (c *lLMServiceClient) GetSupportedModels(ctx context.Context, in *GetSupportedModelsRequest, opts ...grpc.CallOption) (*GetSupportedModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupportedModelsResponse)
	err := c.cc.Invoke(ctx, LLMService_GetSupportedModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) ValidateConfig(ctx context.Context, in *ValidateConfigRequest, opts ...grpc.CallOption) (*ValidateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateConfigResponse)
	err := c.cc.Invoke(ctx, LLMService_ValidateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lLMServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, LLMService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LLMServiceServer is the server API for LLMService service.
// All implementations must embed UnimplementedLLMServiceServer
// for forward compatibility.
//
// LLM 服务定义
type LLMServiceServer interface {
	// 执行 LLM 代理请求 (非流式)
	ExecuteAgent(context.Context, *ExecuteAgentRequest) (*ExecuteAgentResponse, error)
	// 执行 LLM 代理请求 (流式)
	ExecuteAgentStream(*ExecuteAgentRequest, grpc.ServerStreamingServer[ExecuteAgentStreamResponse]) error
	// 获取支持的模型列表
	GetSupportedModels(context.Context, *GetSupportedModelsRequest) (*GetSupportedModelsResponse, error)
	// 验证配置
	ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error)
	// 健康检查
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedLLMServiceServer()
}

// UnimplementedLLMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLLMServiceServer struct{}

func (UnimplementedLLMServiceServer) ExecuteAgent(context.Context, *ExecuteAgentRequest) (*ExecuteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAgent not implemented")
}
func (UnimplementedLLMServiceServer) ExecuteAgentStream(*ExecuteAgentRequest, grpc.ServerStreamingServer[ExecuteAgentStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteAgentStream not implemented")
}
func (UnimplementedLLMServiceServer) GetSupportedModels(context.Context, *GetSupportedModelsRequest) (*GetSupportedModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedModels not implemented")
}
func (UnimplementedLLMServiceServer) ValidateConfig(context.Context, *ValidateConfigRequest) (*ValidateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedLLMServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedLLMServiceServer) mustEmbedUnimplementedLLMServiceServer() {}
func (UnimplementedLLMServiceServer) testEmbeddedByValue()                    {}

// UnsafeLLMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LLMServiceServer will
// result in compilation errors.
type UnsafeLLMServiceServer interface {
	mustEmbedUnimplementedLLMServiceServer()
}

func RegisterLLMServiceServer(s grpc.ServiceRegistrar, srv LLMServiceServer) {
	// If the following call pancis, it indicates UnimplementedLLMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LLMService_ServiceDesc, srv)
}

func _LLMService_ExecuteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).ExecuteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_ExecuteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).ExecuteAgent(ctx, req.(*ExecuteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_ExecuteAgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LLMServiceServer).ExecuteAgentStream(m, &grpc.GenericServerStream[ExecuteAgentRequest, ExecuteAgentStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LLMService_ExecuteAgentStreamServer = grpc.ServerStreamingServer[ExecuteAgentStreamResponse]

func _LLMService_GetSupportedModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).GetSupportedModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_GetSupportedModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).GetSupportedModels(ctx, req.(*GetSupportedModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_ValidateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).ValidateConfig(ctx, req.(*ValidateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LLMService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LLMServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LLMService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LLMServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LLMService_ServiceDesc is the grpc.ServiceDesc for LLMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LLMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.llm.v1.LLMService",
	HandlerType: (*LLMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteAgent",
			Handler:    _LLMService_ExecuteAgent_Handler,
		},
		{
			MethodName: "GetSupportedModels",
			Handler:    _LLMService_GetSupportedModels_Handler,
		},
		{
			MethodName: "ValidateConfig",
			Handler:    _LLMService_ValidateConfig_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _LLMService_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteAgentStream",
			Handler:       _LLMService_ExecuteAgentStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "llm_service.proto",
}
